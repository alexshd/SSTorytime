<div class="bg-white rounded-lg shadow border">
    <div class="border-b px-6 py-4 flex justify-between items-center">
        <h2 class="text-lg font-semibold">Batch {{.CurrentBatch}} of {{.TotalBatches}}</h2>
        <div class="flex gap-2">
            {{if gt .CurrentBatch 0}}
            <button hx-get="/batch/{{sub .CurrentBatch 1}}" hx-target="#editor-container" 
                    class="px-3 py-1 bg-gray-100 border border-gray-300 rounded-md text-sm hover:bg-gray-200 transition duration-200">
                ← Previous
            </button>
            {{end}}
            {{if lt .CurrentBatch (sub .TotalBatches 1)}}
            <button hx-get="/batch/{{add .CurrentBatch 1}}" hx-target="#editor-container" 
                    class="px-3 py-1 bg-gray-100 border border-gray-300 rounded-md text-sm hover:bg-gray-200 transition duration-200">
                Next →
            </button>
            {{end}}
            <button id="download-n4l" 
                    class="px-3 py-1 bg-green-600 text-white rounded-md text-sm hover:bg-green-700 transition duration-200" 
                    title="Download N4L output">
                ⬇️ Save N4L
            </button>
        </div>
    </div>
    <div class="p-6">
        <div class="grid md:grid-cols-2 gap-4">
            <div>
                <h3 class="text-sm font-medium text-gray-700 mb-2">Original Text</h3>
                <div id="left-pane" class="border border-gray-300 rounded-md p-3 bg-gray-50 overflow-y-auto text-sm">
                    {{range $i, $line := splitLines .OriginalText}}
                    <div class="{{if contains $.AmbiguousIndices $i}}bg-yellow-100 border-l-4 border-yellow-400 pl-2{{end}} mb-1">{{$line}}</div>
                    {{end}}
                </div>
            </div>
            <div>
                <h3 class="text-sm font-medium text-gray-700 mb-2">N4L Output</h3>
                <div id="right-pane" class="border border-gray-300 rounded-md p-3 bg-gray-50 overflow-y-auto text-sm">
                    <pre id="n4l-output" class="whitespace-pre-wrap font-mono text-xs">{{.N4LOutput}}</pre>
                </div>
            </div>
        </div>
        {{if .AmbiguousIndices}}
        <div class="mt-4 bg-yellow-50 border border-yellow-200 rounded-md p-3">
            <div class="flex">
                <div class="text-yellow-600 text-sm">
                    <strong>Ambiguous lines detected:</strong> {{len .AmbiguousIndices}} lines marked for review
                </div>
            </div>
        </div>
        {{end}}
    </div>
</div>

<script>
// Download N4L output as file
document.getElementById('download-n4l').onclick = function() {
    var n4l = document.getElementById('n4l-output').innerText;
    var blob = new Blob([n4l], {type: 'text/plain'});
    var a = document.createElement('a');
    a.href = URL.createObjectURL(blob);
    a.download = 'output.n4l';
    document.body.appendChild(a);
    a.click();
    setTimeout(function() { document.body.removeChild(a); }, 100);
};

// Resize panes to fill viewport height
(function() {
    const left = document.getElementById('left-pane');
    const right = document.getElementById('right-pane');
    function resizePanes() {
        if (!left || !right) return;
        const rect = left.getBoundingClientRect();
        const available = window.innerHeight - rect.top - 120; // padding for footer
        const h = Math.max(300, available);
        left.style.height = h + 'px';
        right.style.height = h + 'px';
    }
    window.addEventListener('resize', resizePanes);
    setTimeout(resizePanes, 0);
})();

// Sync scroll between panes
(function() {
    const left = document.getElementById('left-pane');
    const right = document.getElementById('right-pane');
    let syncingLeft = false, syncingRight = false;
    
    function sync(from, to) {
        if (!from || !to) return;
        const maxFrom = from.scrollHeight - from.clientHeight;
        const maxTo = to.scrollHeight - to.clientHeight;
        const ratio = maxFrom > 0 ? (from.scrollTop / maxFrom) : 0;
        to.scrollTop = ratio * maxTo;
    }
    
    if (left && right) {
        left.addEventListener('scroll', function() {
            if (syncingLeft) { syncingLeft = false; return; }
            syncingRight = true;
            sync(left, right);
        });
        
        right.addEventListener('scroll', function() {
            if (syncingRight) { syncingRight = false; return; }
            syncingLeft = true;
            sync(right, left);
        });
    }
})();
</script>