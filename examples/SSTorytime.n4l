
- notes about SSTorytime in N4L


  :: setup, get started ::

  SSTorytime  (depends on) postgres
       "      (depends on) "postgres_contrib package for unaccent() function"
       "      (depends on) go programming language
       "      (note) made with Linux but doesn't depend on anything specific to Linux
       "      (has feature) supports all human languages in Unicode (note) languages that don't use spaces between words may have some issues


   :: motivation, _sequence_ ::

  The goal is to implement useful search patterns for a graph structure in an efficient way.

  Because database connection is slow, we do as much as possible to reduce that amount of data sent over the wire by performing all processing internally. (note) This has the tradeoff of using a slow script language in the database kernel.

  Loading data into a database, with validation, is slow. Retrieving is much faster.

  A graph is basically a structure with an index at every node. There are two modes of use: random access lookup for starting a search--which SQL is already good at, and exploring, path tracing, following leads from that starting point like hypertext.

  Most graph databases don't give any guidance in modelling or searching. They are based on SQL random access search, but this is not how we need to use graphs. 

  Graphs are for following paths with different meanings - or "semantics".

  
 -::_sequence_::



  :: uses, use-cases ::

  Making notes (note) Notes are a lot more concise than prose or spoken language. 
        "      (note) Notes are condensed intent, without flowery elaboration to cloud it.
        "      (note) AI and LLMs produce fluid language, which is not in note form.
  Incident reporting with causal commentary
  Risk procedure documentation
  SRE problem diagnosis methods
  HOW-TO sequences and recipes
  Language learning
  Fact based cramming  

  Forensic fact assimilation and reasoning.

  Reasoning with mathematical support (formula) "\( x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a} \)"

  :: technical details ::

 postgres (depends on) postgres configuration
     "    (depends on) create the SST database (e.g.) "$ sudo su -
$ su - postgres
$ psql
# CREATE user sstoryline password 'sst_1234' superuser;
# CREATE DATABASE sstoryline;
# CREATE DATABASE newdb;
# GRANT ALL PRIVILEGES ON DATABASE sstoryline TO sstoryline;
# GRANT ALL PRIVILEGES ON DATABASE newdb TO sstoryline;
# CREATE EXTENSION UNACCENT;"

     "  (depends on) open for local connections (e.g.) "# File pg_hba.conf, locate for your distribution (you might have to search for it):
# TYPE  DATABASE        USER            ADDRESS                 METHOD

# "local" is for Unix domain socket connections only
local   all             all                                     peer
# IPv4 local connections:
host    all             all             127.0.0.1/32            password
# IPv6 local connections:
host    all             all             ::1/128                 password"

 # to finish ...




 stored procedures/functions in postgres

    "   (note)  uses a language that looks a lot like SQL but is markedly different - beware! (has name) PLpgSQL
    "   (e.g.)  "FUNCTION SumFwdPaths(start link, path text, orientation text, depth integer, maxdepth integer, exclude nodeptr[])
 DECLARE
     fwdlinks Link[];
     empty Link[] = ARRAY[]::Link[];
     lnk Link;
     fwd Link;
     ret_paths Text;
     appendix Text;
     tot_path Text;
 BEGIN
 IF depth = maxdepth THEN
   ret_paths := Format('%s\n%s',ret_paths,path);
   RETURN ret_paths;
 END IF;
 fwdlinks := GetFwdLinks(start.Dst,exclude,sttype);
 FOREACH lnk IN ARRAY fwdlinks LOOP
    IF NOT lnk.Dst = ANY(exclude) THEN
       exclude = array_append(exclude,lnk.Dst);
       IF lnk IS NULL THEN
         ret_paths := Format('%s\n%s',ret_paths,path);
          RETURN ret_paths;
      ELSE
          tot_path := Format('%s;%s',path,lnk::Text);
          appendix := SumFwdPaths(lnk,tot_path,sttype,depth+1,maxdepth,exclude);
          IF appendix IS NOT NULL THEN
             ret_paths := Format('%s\n%s',ret_paths,appendix);
          ELSE
            ret_paths := Format('%s\n%s',ret_paths,tot_path);
         END IF;
      END IF;   
END IF;
END LOOP;
RETURN ret_paths;
END;"    (ex)  A recursive search in SQL


  ######################################################## 

  :: low level API, golang, go programming ::

 +::data types::

 PoSST     (for) establishing a connection to the SST library service
 Node      (for) representing core aspects of a single graph node
 NodePtr   (for) unique key referring to a node and pointing to its data
 Link      (for) representing a graph link, with arrow and destination node and weight
 ArrowPtr  (for) A unique key for a type of link arrow and its properties
 PageMap   (for) representing the original N4L intended layout of notes

 -::data types::
 +::database upload functions::

"CreateDBNode(ctx PoSST, n Node) Node" (for) establishing a node structure in postgres
"UploadNodeToDB(ctx PoSST, org Node)"  (for) uploading an existing Node in memory to postgres
"UploadArrowToDB(ctx PoSST,arrow ArrowPtr)" (for) uploading an arrow definition from memory to postgres
"UploadInverseArrowToDB(ctx PoSST,arrow ArrowPtr)" (for) uploading an inverse arrow definition
"UploadPageMapEvent(ctx PoSST, line PageMap)" (for) uploading a PageMap structure from memory to postgres

"IdempDBAddLink(ctx PoSST,from Node,link Link,to Node)" (for) entry point for adding a link to a node in postgres
"CreateDBNodeArrowNode(ctx PoSST, org NodePtr, dst Link, sttype int) bool" (for) adding a NodeArrowNode secondary/derived structure to postgres

 -::database upload functions::
 +::database retrieve structural parts, retrieving::


"GetDBChaptersMatchingName(ctx PoSST,src string) []string" (for) retrieving chapter names
"GetDBContextsMatchingName(ctx PoSST,src string) []string" (for) retrieving context elements/dictionary with Node.S matching src string
"GetDBNodePtrMatchingName(ctx PoSST,src,chap string) []NodePtr" (for) retrieving a NodePtr to nodes with Node.S matching src string, node.Chap matching chap
"GetDBNodeByNodePtr(ctx PoSST,db_nptr NodePtr) Node" (for) retrieving a full Node structure from a NodePtr reference
"GetDBNodeArrowNodeMatchingArrowPtrs(ctx PoSST,chap string,cn []string,arrows []ArrowPtr) []NodeArrowNode" (for) retrieving a NodeArrowNode record in a given chapter and context by arrow type
"GetDBNodeContextsMatchingArrow(ctx PoSST,searchtext string,chap string,cn []string,arrow []ArrowPtr,page int) []QNodePtr" (for) retrieving contextualized node pointers involved in arrow criteria
"GetNodesStartingStoriesForArrow(ctx PoSST,arrow string) []NodePtr" (for) retrieving singleton nodes starting paths with a particular arrow
    " (see) "GetDBSingletonBySTType(ctx PoSST,sttypes []int,chap string,cn []string) ([]NodePtr,[]NodePtr)"
    " (see) "GetNCCNodesStartingStoriesForArrow(ctx PoSST,arrow string,chapter string,context []string) []NodePtr"
"GetNCCNodesStartingStoriesForArrow(ctx PoSST,arrow string,chapter string,context []string) []NodePtr" (for) retrieving singleton nodes starting paths with a particular arrow and matching context and chapter 
    " (see) "GetDBSingletonBySTType(ctx PoSST,sttypes []int,chap string,cn []string) ([]NodePtr,[]NodePtr)"
    " (see) "GetNodesStartingStoriesForArrow(ctx PoSST,arrow string) []NodePtr"
"GetDBSingletonBySTType(ctx PoSST,sttypes []int,chap string,cn []string) ([]NodePtr,[]NodePtr)" (for) retrieving a list of nodes that are sources or sinks in chapters and contexts of the graph with respect to a given link meta SSType
    "  (see) "GetNCCNodesStartingStoriesForArrow(ctx PoSST,arrow string,chapter string,context []string) []NodePtr"
    "  (see) "GetNodesStartingStoriesForArrow(ctx PoSST,arrow string) []NodePtr"

"GetDBArrowsWithArrowName(ctx PoSST,s string) ArrowPtr"       (for) retrieving all arrow details matching exact name
    " (see) "GetDBArrowByName(ctx PoSST,name string) ArrowPtr" 
"GetDBArrowsMatchingArrowName(ctx PoSST,s string) []ArrowPtr" (for) retrieving list of all arrow details matching name
"GetDBArrowByName(ctx PoSST,name string) ArrowPtr"   (for) retrieving all arrow details matching name from arrow directory 
     " (see) "GetDBArrowsWithArrowName(ctx PoSST,s string) ArrowPtr"
"GetDBArrowByPtr(ctx PoSST,arrowptr ArrowPtr) ArrowDirectory"
"GetDBPageMap(ctx PoSST,chap string,cn []string,page int) []PageMap" (for) retrieving a PageMap matching chapter, context and logical page number (note) pages are currently 60 items long
"GetFwdConeAsNodes(ctx PoSST, start NodePtr, sttype,depth int) []NodePtr" (for) retrieving the future cone set of Nodes from a given NodePtr, returned as NodePtr for orbit description
"GetFwdConeAsLinks(ctx PoSST, start NodePtr, sttype,depth int) []Link" (for) retrieving the future cone set of Nodes from a given NodePtr, returned as Link structures for path description
"GetFwdPathsAsLinks(ctx PoSST, start NodePtr, sttype,depth int) ([][]Link,int)" (for) retrieving the future cone set of Links from a given NodePtr as an array of paths, i.e. a double array of Link
"GetEntireConePathsAsLinks(ctx PoSST,orientation string,start NodePtr,depth int) ([][]Link,int)" (for) retrieving the cone set of Nodes from a given NodePtr in all directions, returned as Link structures for path description
"GetEntireNCConePathsAsLinks(ctx PoSST,orientation string,start NodePtr,depth int,chapter string,context []string) ([][]Link,int)" (for) retrieving the cone set of Nodes from a given NodePtr in all directions, returned as Link structures for path description and filtered by chapter and context, specifying direction fwd/bwd/any
"GetEntireNCSuperConePathsAsLinks(ctx PoSST,orientation string,start []NodePtr,depth int,chapter string,context []string) ([][]Link,int)" (for) retrieving the cone set of Nodes from a given multinode start set of NodePtr in all directions, returned as Link structures for path description, filtered by chapter and context, specifying direction fwd/bwd/any

 -::database retrieve structural parts::
 +::path integral:::

"GetPathsAndSymmetries(ctx PoSST,start_set,end_set []NodePtr,chapter string,context []string,maxdepth int) [][]Link" (for) retrieve solution paths between a starting set and and final set like +'<final|start>' in generalized way
"GetPathTransverseSuperNodes(ctx PoSST,solutions [][]Link,maxdepth int) [][]NodePtr" (for) establish the nodes that play idential roles in a set of paths from +'<final|start>' to see which nodes are redundant

  -::path integral:::
  +::adjacency matrix representation, graph vector support::

"GetDBAdjacentNodePtrBySTType(ctx PoSST,sttypes []int,chap string,cn []string) ([][]float32,[]NodePtr)" (for) retrieving the graph adjacenccy matrix as a square matrix of float32 link weights and an index to NodePointer lookup directory

 -::path integral:::
 +::orbits::

"GetNodeOrbit(ctx PoSST,nptr NodePtr,exclude_vector string) [ST_TOP][]Orbit" (for) retrieving the nearest neighbours of a NodePtr to maximum radius of three layers
"PrintNodeOrbit(ctx PoSST, nptr NodePtr,width int)" (for) printing a Node orbit in human readable form on the console, calling GetNodeOrbit
"PrintLinkOrbit(notes [ST_TOP][]Orbit,sttype int)" (for) printing an orbit in human readable form
"PrintLinkPath(ctx PoSST, cone [][]Link, p int, prefix string,chapter string,context []string)" (for) printing a Link array of paths in human readable form




























