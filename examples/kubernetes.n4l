- Kubernetes notes

################

:: core concepts ::

%Kubernetes (short for) "K8s"
          (represents) a %container %orchestration system
          (foundedby) %Google
          (maintainedby) %CNCF
          (enables) %declarative %automation of containerized workloads

%pod (represents) the smallest deployable computing unit in Kubernetes
     (named after) "pod of whales" or "pea pod"
     (contains) one or more %containers
     (runsin) a shared %execution context
     (managedby) %controllers

%container (managedby) %containerd
%kubectl (usedto) interact with %Kubernetes via CLI

%operator (implements) a %controller pattern
          (manages) complex applications and their components
          (uses) %CRDs

:: pods ::

"One-container-per-pod" (is) the most common usage pattern

A %pod (cancontain) multiple co-located containers that are tightly coupled
This pattern (usedfor) %sidecars, %init containers, and %debugging

A %pod (persists) until deleted
      (isnot) a %process
      (is) an %environment for running containers

Restarting a %container (isnot) the same as restarting a %pod

%init containers (run) during pod startup
                (runbefore) main application containers
                (usedfor) setup tasks like config init or dependency checks

%ephemeral containers (usedfor) debugging a running pod
                     (canbe) injected into running pods without restarting them
                     (donot) run at pod startup
                     (excludedfrom) pod restart policy

%sidecar container (runswith) main application container
                  (shares) the %pod’s network and storage context
                  (usedfor) %logging, %proxying, %service mesh, and other supportive tasks
                  (enables) separation of concerns
                  (terminateswith) the main container

:: api and extension ::

%API server (represents) hub of the cluster API
           (connectswith) %nodes via %HTTPS
           (authenticates) via client certs or service account tokens

'Kubernetes uses a >"hub-and-spoke API pattern" — all API usage terminates at the API server.'

%service account (injects) %bearer token and %root certificate into pods
%kube-proxy (redirects) service IPs to %API server HTTPS endpoints

%CRD (short for) Custom Resource Definition
     (implements) a way to extend the API
     (creates) new RESTful resource paths
     (usedby) %operator
     (canbe) %namespaced or %cluster-scoped

"When you create a new CRD, the Kubernetes API Server creates a new RESTful resource path for each version you specify."

:: control loops and reasoning ::

%controller (implements) a %control loop
           (compares) %desiredstate and %actualstate
           (reconciles) the system toward the desired state

%reconciliation (represents) %abductive reasoning
               (observes) reality
               (infers) steps needed to achieve promised state

%Kubernetes (models) %autonomous agents making and keeping promises
            (demonstrates) distributed %cooperation without central control

%pod, %PVC, %controller (each) make %promises that define system state

:: storage ::

%Persistent Volume (short for) %PV
                  (represents) a piece of storage in the cluster
                  (provisionedby) an administrator or a %Storage Class
                  (managedas) a cluster resource
                  (bindsto) %PVC
                  (promises) capacity and access modes

%Persistent Volume Claim (short for) %PVC
                        (represents) a request for storage by a user
                        (specifies) size and access requirements
                        (bindsto) %PV
                        (usedby) a %pod to mount storage
                        (represents) consumer's promise

%Storage Class (defines) parameters for dynamic volume provisioning
               (usedby) %PVC to request volumes on demand
               (provides) abstraction over storage backend (e.g. EBS, NFS, CSI)

%PVC (enables) storage decoupling from the lifecycle of %pods
     (allows) pods to be rescheduled without data loss

%PV (has) a lifecycle independent of individual %pods

"Volumes in Kubernetes can be %ephemeral or %persistent. Ephemeral volumes exist only during the pod’s lifetime, while persistent volumes survive pod restarts or rescheduling."

:: system architecture ::

%cluster (consists of) %control plane and %worker nodes

%control plane (includes) %API server, %scheduler, %controller-manager, %etcd

%node (runs) %kubelet and %container runtime

%kubelet (authenticates) with %client certificate
%root certificate (installedon) each node

%kubelet TLS bootstrapping (usedfor) automated certificate provisioning

:: networking and security ::

%pod (connectsto) %API server using injected credentials

%kubectl (executes) commands like:
  "kubectl get pods -n kube-system"
  "kubectl apply -f https://github.com/app.yml"

:: resource management ::

%Linux control groups (constrain) %resources allocated to processes

There are two versions:
  - %cgroup v1
  - %cgroup v2 (is) new generation

%Kubernetes (uses) cgroups for container resource isolation

:: automation pipelines ::

%CI/CD (short for) Continuous Integration / Continuous Deployment
      (automates) %testing, %security scanning, and %deployment

:: story: pod lifecycle ::

@path.create-pod:
    $event.1 (user applies) pod.yaml
    $event.2 (API server stores) pod spec in %etcd
    $event.3 (scheduler binds) pod to a node
    $event.4 (kubelet starts) containers on the node

:: story: operator upgrade ::

@path.operator-upgrade:
    $event.1 (CRD defines) new resource version
    $event.2 (operator observes) outdated version
    $event.3 (operator transforms) resource to new spec
    $event.4 (system reaches) new desired state

:: glossary and meta ::

%weak coupling > %strong coupling

"bare metal"
"self-hosted"
"managed Kubernetes"
"docker"
